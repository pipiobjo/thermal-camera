<!DOCTYPE HTML>
<html>

<head>
    <title>ESP Web Server</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="data:,">
    <style>
        html {
            font-family: Arial, Helvetica, sans-serif;
            text-align: center;
        }

        h1 {
            font-size: 1.8rem;
            color: white;
        }

        h2 {
            font-size: 1.5rem;
            font-weight: bold;
            color: #143642;
        }

        .topnav {
            overflow: hidden;
            background-color: #143642;
            display: flex;
        }

        .flex-child {
            flex: 1;
        }

        body {
            margin: 0;
        }

        /* .content {
            padding: 30px;
            max-width: 80%;
            margin: 0 auto;
        } */

        .card {
            background-color: #F8F7F9;
            box-shadow: 2px 2px 12px 1px rgba(140, 140, 140, .5);
            padding-top: 10px;
            padding-bottom: 20px;
        }

        .button {
            padding: 15px 50px;
            font-size: 24px;
            text-align: center;
            outline: none;
            color: #fff;
            background-color: #0f8b8d;
            border: none;
            border-radius: 5px;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
        }

        /*.button:hover {background-color: #0f8b8d}*/
        .button:active {
            background-color: #0f8b8d;
            box-shadow: 2 2px #CDCDCD;
            transform: translateY(2px);
        }

        .state {
            font-size: 1.5rem;
            color: #8c8c8c;
            font-weight: bold;
        }

        .canvasRoundCorders {
            border-radius: 10px;
            background: #F4F6F6;
            box-shadow: 2px 2px #ABB2B9;
            padding: 3px;
            /* width: 600px;
            height: 300px; */
        }
    </style>
    <title>ESP8266 - Thermalcam</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="data:,">
</head>

<body>
    <div class="topnav">
        <div class="flex-child">
            <h1 id="header-min-temp"></h1>
        </div>
        <div class="flex-child">
            <h1 id="header-max-temp"></h1>
        </div>
        <div class="flex-child">
            <button id="button-start-stop" class="button">Stop</button>
        </div>

    </div>
    <!-- <div class="content"> -->
    <div>
        <div id="canvas-container">
            <!-- <div id="canvas-container" class="card"> -->
            <!-- <canvas id="canvas" width="32" height="24" style="width:100%"></canvas> -->
            <canvas id="canvas" width="32" height="24" style="width:90%" class="canvasRoundCorders"></canvas>
            <!-- <h2>Output - GPIO 2</h2> -->
            <!-- <canvas id='canvasTemp' class='canvasRoundCorders'></canvas> -->
            <!-- <p class="state">state: <span id="state">%STATE%</span></p> -->

            <!-- <img style="width:100%;" id="image"> -->


            <!-- <div id="output">test</div> -->
        </div>
        <div class="content">
            <button id="button-horizontal" class="button">Toggle horizontal</button>
            <button id="button-vertical" class="button">Toggle vertical</button>

        </div>
    </div>
    <script>
        var gateway = `ws://${window.location.hostname}:81/ws`;
        gateway = 'ws://192.168.4.1:81/ws'

        var websocket;
        var RGB_MAX = 255;
        var RGB_MIN = 0;
        var SENSOR_MAX = 30;
        var SENSOR_MIN = 22;

        var SORT_LEFT_TO_RIGHT = true;
        var SORT_TOP_TO_BOTTOM = true;

        var START_SHOW_DATA = true;


        function calculateRedValue(sensorValue) {
            return (RGB_MAX - RGB_MIN) / (SENSOR_MAX - SENSOR_MIN) * (sensorValue - SENSOR_MIN) + RGB_MIN;
        }


        function startTestWarn() {
            var output = document.getElementById('output');
            output.innerHTML = 'Calculating...';
        }


        function buildPixelData(tgtImageData, singleTempValue, pixel_counter) {
            var r = calculateRedValue(singleTempValue);
            var g = 0;
            var b = 255 - r;
            var off = (pixel_counter) * 4;
            tgtImageData[off] = r;
            tgtImageData[off + 1] = g;
            tgtImageData[off + 2] = b;
            tgtImageData[off + 3] = 255;
        }


        function buildImageData(temps, ctx) {

            let sortedTempArray = Array.from(Array(24), () => new Array(32))

            var i = 0;
            var newMaxValue = SENSOR_MAX;
            var newMinValue = SENSOR_MIN;
            for (var y = 0; y < 24; y++) {
                for (var x = 0; x < 32; x++) {

                    // if (x === 0 && y === 0) {
                    //     newMaxValue = temps[i];
                    //     newMinValue = temps[i];
                    // }
                    sortedTempArray[y][x] = temps[i];

                    // check min max values
                    if (temps[i] > SENSOR_MAX) {
                        newMaxValue = temps[i];
                    }

                    if (temps[i] < SENSOR_MIN) {
                        newMinValue = temps[i];
                    }
                    i++;
                }
            }

            SENSOR_MAX = newMaxValue;
            SENSOR_MIN = newMinValue;



            // get the imageData and pixel array from the canvas
            var imgData = ctx.getImageData(0, 0, 32, 24);
            var data = imgData.data;
            var ii = 0;
            if (SORT_TOP_TO_BOTTOM) {
                for (var yi = 0; yi < sortedTempArray.length; yi++) {
                    var xValues = sortedTempArray[yi];

                    if (SORT_LEFT_TO_RIGHT) {
                        for (var xi = 0; xi < xValues.length; xi++) {

                            if (sortedTempArray[yi][xi] === undefined) {
                                continue;
                            }
                            // console.log("ii=" + ii + " xi = " + xi + " yi = " + yi + " temp: " + sortedTempArray[yi][
                            //     xi
                            // ]);
                            buildPixelData(data, sortedTempArray[yi][xi], ii);
                            ii++;

                        }
                    } else {
                        // sort right to left
                        for (var xi = xValues.length; xi >= 0; xi--) {
                            if (sortedTempArray[yi][xi] === undefined) {
                                continue;
                            } //
                            // console.log("ii=" + ii + " xi=" + xi + " yi=" + yi + " temp: " + sortedTempArray[yi][xi]);
                            buildPixelData(data, sortedTempArray[yi][xi], ii);
                            ii++;
                        }
                    }
                }
            } else {
                for (var yi = sortedTempArray.length - 1; yi >= 0; yi--) {
                    var xValues = sortedTempArray[yi];
                    if (SORT_LEFT_TO_RIGHT) {
                        for (var xi = 0; xi < xValues.length; xi++) {
                            if (sortedTempArray[yi][xi] === undefined) {
                                continue;
                            } // 
                            // console.log("ii=" + ii + " xi=" + xi + " yi = " + yi + " temp: " + sortedTempArray[yi][xi]);
                            buildPixelData(data, sortedTempArray[yi][xi], ii);
                            ii++;
                        }
                    } else {
                        // sort right to left
                        for (var xi = xValues.length; xi > 0; xi--) {
                            if (sortedTempArray[yi][xi] === undefined) {
                                continue;
                            }
                            // console.log("ii=" + ii + " xi=" + xi + " yi=" + yi + " temp: " + sortedTempArray[yi][xi]);
                            buildPixelData(data, sortedTempArray[yi][xi], ii);
                            ii++;
                        }
                    }
                }

            }





            let newHeaderMinString = "Min Temp: " + newMinValue + "°C";
            // console.log("new max value", newMaxValue);
            document.getElementById("header-min-temp").innerHTML = newHeaderMinString;

            let newHeaderMaxString = " Max Temp: " + newMaxValue + "°C";
            // console.log("new min value", newMinValue);
            document.getElementById("header-max-temp").innerHTML = newHeaderMaxString;

            return imgData;
        }

        function imageData(temps) {


            if (START_SHOW_DATA !== true) {
                return;
            }


            console.time("image-data-time");

            let canvas = document.getElementById('canvas');
            let ctx = canvas.getContext('2d');

            let intViewportWidth = window.innerWidth ||
                document.documentElement.clientWidth ||
                document.body.clientWidth;
            let intViewportHeight = window.innerHeight ||
                document.documentElement.clientHeight ||
                document.body.clientHeight;


            let imgData = buildImageData(temps, ctx)
            // put the modified pixels back on the canvas
            ctx.putImageData(imgData, 0, 0);
            var imageObject = new Image();
            imageObject.style.width = "32px";
            imageObject.style.height = "24px";
            imageObject.onload = function () {
                console.time("scale-image-data-time");
                ctx.drawImage(imageObject, 0, 0);
                console.timeEnd("scale-image-data-time");

            }
            imageObject.src = canvas.toDataURL();

            canvas.style.width = "95%";
            canvas.style.height = intViewportHeight * 0.90 + "px";
            // append the new img object to the page
            // document.body.appendChild(imageObject);
            console.timeEnd("image-data-time");

        }




        function initWebSocket() {
            console.log('Trying to open a WebSocket connection...');
            websocket = new WebSocket(gateway);
            websocket.onopen = onOpen;
            websocket.onclose = onClose;
            websocket.onmessage = onMessage; // <-- add this line
        }

        function onOpen(event) {
            console.log('Connection opened');
        }

        function onClose(event) {
            console.log('Connection closed');
            setTimeout(initWebSocket, 2000);
        }

        function onMessage(event) {
            var wsResult = event.data
            var temps = JSON.parse(wsResult);
            // console.log(temps);
            imageData(temps);
        }

        function onLoad(event) {

            temps = [
                26, 25, 25, 25, 26, 25, 25, 25, 25, 24, 24, 24, 25, 24, 24, 24, 24, 24, 23, 23, 23, 23, 23, 23,
                23, 23, 23, 23, 23, 23, 22, 22, 26, 25, 25, 26, 25, 25, 25, 25, 25, 25, 24, 24, 24, 24, 24, 24,
                24, 24, 24, 23, 23, 24, 23, 23, 23, 23, 23, 23, 23, 23, 22, 23, 26, 26, 25, 25, 25, 25, 25, 25,
                25, 25, 24, 24, 25, 24, 24, 24, 24, 24, 24, 24, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23, 22, 23,
                25, 26, 25, 26, 25, 25, 25, 25, 25, 25, 24, 25, 24, 24, 24, 24, 24, 24, 24, 23, 23, 23, 23, 23,
                23, 24, 23, 23, 23, 23, 22, 22, 26, 25, 25, 25, 25, 25, 25, 24, 25, 24, 24, 24, 24, 24, 24, 24,
                24, 24, 23, 24, 23, 23, 23, 23, 23, 22, 23, 23, 23, 23, 23, 22, 25, 26, 25, 25, 25, 25, 25, 25,
                25, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
                26, 25, 25, 25, 25, 25, 25, 24, 24, 25, 24, 24, 24, 24, 24, 24, 24, 24, 23, 24, 24, 24, 23, 23,
                23, 23, 23, 23, 23, 23, 23, 23, 25, 26, 25, 25, 25, 25, 25, 25, 24, 25, 24, 24, 24, 24, 24, 24,
                24, 24, 24, 24, 24, 23, 23, 24, 23, 23, 23, 23, 23, 23, 23, 23, 25, 25, 25, 25, 25, 25, 25, 25,
                25, 25, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23,
                25, 25, 25, 26, 25, 25, 25, 25, 25, 25, 24, 25, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 24,
                23, 23, 23, 23, 23, 24, 23, 24, 25, 25, 25, 25, 25, 25, 24, 24, 25, 24, 24, 24, 24, 24, 24, 24,
                24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 23, 24, 23, 23, 25, 25, 25, 25, 25, 25, 25, 25,
                24, 24, 24, 24, 24, 25, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 24, 23, 24,
                25, 25, 25, 25, 25, 25, 25, 25, 24, 25, 24, 24, 24, 24, 24, 24, 25, 24, 24, 24, 24, 24, 24, 24,
                25, 24, 24, 24, 25, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 24, 24, 24, 24, 24,
                24, 25, 24, 25, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 24, 24, 25, 25, 25, 25, 25, 25, 25, 24,
                25, 24, 24, 24, 25, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 27, 28, 27, 26, 25,
                25, 25, 25, 25, 25, 25, 24, 25, 25, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 25, 25,
                25, 25, 28, 28, 29, 29, 27, 26, 25, 25, 25, 25, 25, 25, 24, 24, 25, 25, 25, 25, 25, 24, 25, 24,
                25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 28, 28, 30, 30, 29, 28, 25, 25, 25, 25, 25, 25, 25, 24,
                24, 25, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 25, 26, 26, 27, 28, 30, 29, 30, 30, 30,
                25, 25, 25, 25, 25, 24, 24, 24, 25, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 25, 26, 26,
                28, 28, 29, 30, 30, 30, 28, 29, 25, 25, 25, 25, 25, 25, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25,
                25, 25, 26, 26, 26, 26, 26, 28, 28, 28, 29, 30, 30, 30, 28, 28, 25, 25, 25, 25, 25, 24, 25, 25,
                25, 25, 25, 25, 25, 25, 25, 25, 26, 25, 26, 26, 27, 26, 27, 29, 28, 28, 30, 31, 31, 30, 28, 28,
                25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 25, 26, 26, 26, 26, 27, 28, 28,
                28, 28, 31, 31, 31, 30, 28, 30, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
                26, 26, 26, 27, 27, 28, 28, 29, 28, 28, 30, 30, 31, 30, 29, 29, 25, 25, 25, 25, 25, 25, 25, 25,
                25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 27, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 30, 30
            ]
            initRenderOptions();
            // imageData(temps);
            initWebSocket();
            initButton();

        }
        const LOCALSTORAGE_HORIZONTAL_KEY = 'thermalcam-horizontal';
        const LOCALSTORAGE_VERTICAL_KEY = 'thermalcam-vertical';

        function initRenderOptions() {
            var hor = localStorage.getItem(LOCALSTORAGE_HORIZONTAL_KEY);
            var vert = localStorage.getItem(LOCALSTORAGE_VERTICAL_KEY);

            SORT_LEFT_TO_RIGHT = (hor === 'true');
            SORT_TOP_TO_BOTTOM = (vert === 'true');
        }


        function toggleHorizontal() {
            SORT_LEFT_TO_RIGHT = !SORT_LEFT_TO_RIGHT;
            localStorage.setItem(LOCALSTORAGE_HORIZONTAL_KEY, SORT_LEFT_TO_RIGHT.toString());
        }

        function toggleVertical() {
            SORT_TOP_TO_BOTTOM = !SORT_TOP_TO_BOTTOM;
            localStorage.setItem(LOCALSTORAGE_VERTICAL_KEY, SORT_TOP_TO_BOTTOM.toString());

        }

        function toggleStartStop() {
            START_SHOW_DATA = !START_SHOW_DATA;
            if (START_SHOW_DATA === true) {
                document.getElementById('button-start-stop').innerHTML = "Stop"
            } else {
                document.getElementById('button-start-stop').innerHTML = "Start"
            }
        }





        function initButton() {

            document.getElementById('button-horizontal').addEventListener('click', toggleHorizontal);
            document.getElementById('button-vertical').addEventListener('click', toggleVertical);
            document.getElementById('button-start-stop').addEventListener('click', toggleStartStop);

        }



        window.addEventListener('load', onLoad);
    </script>
</body>

</html>